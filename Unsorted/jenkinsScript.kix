parameters([
string(defaultValue: 'main', name: 'branch'), 
choice(choices: ['production, dev'], 
name: 'environment'), 
string(defaultValue: 'latest', name: 'tag')
])
pipeline {
	agent any
	stages {
		stage("Clean Up") {
			steps {
				deleteDir()
			}
		}
		stage("Clone Repo") {
			steps {
              git url: 'https://gitlab.com/khanhkhanh196/khanhkhanh196.git',
                  branch : "${params.branch}"
			}
		}
		stage("Build") {
			steps {
				dir("api-gateway"){
				sh "mvn clean install"
				}
			}
		}
		stage("Build Docker Image") {
			steps {
				dir("api-gateway"){
				 sh "docker build . -t ocs-training:${params.tag}"
				}
			}
		}
		
		stage('Docker Push') {
    	agent any
             steps {
      	        withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                	sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                    sh "docker tag ocs-training:${params.tag} khanhkhanh196/ocs-training:${params.tag}"
                    sh "docker push khanhkhanh196/ocs-training:${params.tag}"
                }
             }
		}
		stage("Test") {
			steps {
				dir("api-gateway"){
				    sh "mvn test"
				}
			}
		}
	}
}

	  pipeline {
	agent any 
		stages {
		    stage("Deploy") {
		    steps{
		        dir("../OCSTraining/k8s") {
		            withKubeConfig([credentialsId: 'kubectl']) {
                       sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
                       sh 'chmod u+x ./kubectl'
                       sh './kubectl apply -f api-gateway-deployment.yml'
                       sh './kubectl get pods'
                    }
		        }
	    	}
	    }
		}
		
	    
	  }